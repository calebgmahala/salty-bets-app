# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The color options returned by the salty-boy api"""
enum Color {
  BLUE
  RED
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Fighter {
  bestStreak: Int!
  createdTime: DateTimeISO!
  elo: Int!
  id: ID!
  lastUpdated: DateTimeISO!
  name: String!
  prevTier: Tier!
  tier: Tier!
  tierElo: Int!
}

type Item {
  color: String
  id: Float!
  name: String!
}

type Match {
  betBlue: Float!
  betRed: Float!
  colour: Color!
  date: DateTimeISO!
  fighterBlue: Fighter!
  fighterBlueId: Int!
  fighterRed: Fighter!
  fighterRedId: Int!
  id: ID!
  matchFormat: MatchType!
  streakBlue: Int!
  streakRed: Int!
  tier: Tier!
  winner: Fighter!
  winnerId: Int!
}

"""The type of match being played"""
enum MatchType {
  EXHIBITION
  MATCHMAKING
  TOURNAMENT
}

type Mutation {
  createItem(color: String, id: Int, name: String!): Item!
  createPlayer(balance: Float, id: Int, password: String!, username: String!): Player!
  login(password: String!, username: String!): String!
  logout: Player!
}

type Player {
  balance: Float!
  id: Float!
  isAdmin: Boolean!
  username: String!
}

type Query {
  getFighter(id: Int!): Fighter!
  getMatch(id: Int!): Match!
  item(id: Int!): Item!
  items: [Item!]!
  player(id: Int!): Player!
  players: [Player!]!
}

"""The Tier of the match or of a fighter"""
enum Tier {
  A
  B
  P
  S
  X
}